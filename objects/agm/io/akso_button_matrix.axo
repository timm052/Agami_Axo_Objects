<objdefs appVersion="1.0.12">
   <obj.normal id="button_matrix" uuid="af491c0e-a009-11eb-bcbc-0242ac130002">
      <sDescription>exposes the controls of the MTM axocontrol board</sDescription>
      <author>avor</author>
      <license>GPL</license>
      <helpPatch>button_matrix.axh</helpPatch>
      <inlets/>
      <outlets>
         <bool32 name="key1" description="output"/>
         <bool32 name="key2" description="output"/>
         <bool32 name="key3" description="output"/>
         <bool32 name="key4" description="output"/>
         <bool32 name="key5" description="output"/>
         <bool32 name="key6" description="output"/>
         <bool32 name="key7" description="output"/>
         <bool32 name="key8" description="output"/>
         <bool32 name="key9" description="output"/>
         <bool32 name="key10" description="output"/>
         <bool32 name="key11" description="output"/>
         <bool32 name="key12" description="output"/>
         <bool32 name="key13" description="output"/>
      </outlets>
      <displays/>
      <params/>
      <attribs/>
      <depends>
         <depend>I2CD1</depend>
      </depends>
      <code.declaration><![CDATA[// **********
// LOCAL DATA
// **********

//Define IO Expander Addresses
#define IObut1 0x20
#define IOenc1 0x21

// Define IO Expander Port Addresses
#define MCP_IODIRA 0x00
#define MCP_IODIRB 0x01
#define MCP_IOCONA 0x0A
#define MCP_GPPUA 0x0C
#define MCP_GPPUB 0x0D
#define MCP_GPIOA 0x12
#define MCP_GPIOB 0x13

// Define Matrix Rows/Columns
// NOTE: Row values are not actual pin position, they are for left shifts (<<)
#define ROW0 0x04
#define ROW1 0x05
#define ROW2 0x06
#define ROW3 0x07
#define COL0 0x01
#define COL1 0x02
#define COL2 0x04
#define COL3 0x08

// Global variables
uint8_t receive;   // Store rxbuf here when returning, so I2C stuff doesn't overwrite it
uint8_t *txbuf;    // Pointer to buffer for transmit (buffers created in setup)
uint8_t *rxbuf;    // Pointer to buffer for receive
uint8_t check = 0; // Used for i2c debugging, not implemented
msg_t error;       // Used for i2c debugging, not implemented
int count = 0;     // Used for timing in k-rate

bool k1 = 0; // Key values, should just make these bool, or store all in one int16
bool k2 = 0;
bool k3 = 0;
bool k4 = 0;
bool k5 = 0;
bool k6 = 0;
bool k7 = 0;
bool k8 = 0;
bool k9 = 0;
bool k10 = 0;
bool k11 = 0;
bool k12 = 0;
bool k13 = 0;
bool k14 = 0;
bool k15 = 0;
bool k16 = 0;

/* Function: Setup
*  ------------------------
* Inital setup for hardware, moves buffer cursor to sram, asigns pointers to 
* buffers and cofigures the io expander, called in INIT CODE
* 
* returns: null
*/
void setup()
{
    // set buffer location to I2C
    static uint8_t _txbuf[32] __attribute__((section(".sram2")));
    static uint8_t _rxbuf[32] __attribute__((section(".sram2")));

    // rx & tx Buffer pointers
    txbuf = _txbuf;
    rxbuf = _rxbuf;

    // Send io expander configr
    mcp_send_command(IObut1, MCP_IOCONA, 0b00100000); // I/O Control Register: BANK=0, SEQOP=1, HAEN=1 (Enable Addressing)
    mcp_send_command(IObut1, MCP_IODIRB, 0b11110000); // Set col on PortB to out and rows to inp
    mcp_send_command(IObut1, MCP_GPPUB, 0b11110000);  // Set pullups on rows
}

/* Function: mcp_send_command
*  ------------------------
* Send value to a register of an i2c device  
*   
* dev: i2c device address
* reg: adress of io expander register to 
* val: value to send to register
* 
* returns: null
*/
void mcp_send_command(uint8_t dev, uint8_t reg, uint8_t val)
{
    msg_t temp = 1;        // Stores result of message(not req) returns <=0 init to 1
    i2cAcquireBus(&I2CD1); // Acquire the I2C bus

    // store the register address and val in buffer
    txbuf[0] = reg;
    txbuf[1] = val;

    // send i2c message stores debug msg_t return in temp
    temp = i2cMasterTransmitTimeout(
        &I2CD1, // Transmit using &I2CD1 (from the I2C config object)
        dev,    // device address
        txbuf,  // data in txbuff
        2,      // two block from txbuff starts at buf[0]
        rxbuf,  // Store recv data in rxbuf (set to NULL when not receiving)
        0,      // No. of messages to store
        30);    // timeout

    // Release the I2C bus
    i2cReleaseBus(&I2CD1);

    // Convert to an int for debug logging
    if (temp == 0)
    {
        check = 1;
    }
    if (temp == -2)
    {
        check = 2;
    }
    if (temp == -1)
    {
        check = 3;
    }
}

/* Function: mcp_red_command
*  ------------------------
* Read the state of i2c ioexpander  
*   
* dev: i2c device address
* reg: adress of io expander register to 
* 
* returns: null
*/
void mcp_read_command(uint8_t dev, uint8_t reg)
{
    msg_t temp = 1;        // Stores result of message(not req) returns <=0 init to 1
    i2cAcquireBus(&I2CD1); // Acquire the I2C bus

    // store the register address and val in buffer
    txbuf[0] = reg;

    // send i2c message stores debug msg_t return in temp
    temp = i2cMasterTransmitTimeout(
        &I2CD1, // Transmit using &I2CD1 (from the I2C config object)
        dev,    // device addresson
        txbuf,  // data in txbuff
        1,      // two block from txbuff starts at buf[0]
        rxbuf,  // Store recv data in rxbuf (set to NULL when not receiving)
        1,      // No. of messages to store
        30);    // timeout

    // Store here instead of in the buffer (for saftety)
    receive = rxbuf[0];

    // Release the I2C bus
    i2cReleaseBus(&I2CD1);

    // Convert to an int for debug logging
    if (temp == 0)
    {
        check = 1;
    }
    if (temp == -2)
    {
        check = 2;
    }
    if (temp == -1)
    {
        check = 3;
    }
}

/* Function: bProcess
*  ------------------------
* reads the state of the button matrix called at k-rate but setting pins
* high then checking for low
* 
* returns: null
*/
void bProcess()
{
    // Setting pins HIGH and check for LOW values ~ denotes inverted values due to matrix design
    mcp_send_command(IObut1, MCP_GPIOB, ~COL0); // Set col 0 LOW others HIGH on port B io expander
    mcp_read_command(IObut1, MCP_GPIOB);        // Read values on Port B (stored in receive)
    k1 = (~receive & (1 << ROW0));              // eg. If the row 0 pin is low when col 0 row is low, K1 is pressed
    k5 = (~receive & (1 << ROW1));
    k9 = (~receive & (1 << ROW2));
    k13 = (~receive & (1 << ROW3));

    mcp_send_command(IObut1, MCP_GPIOB, ~COL1); //Repeat process for each column
    mcp_read_command(IObut1, MCP_GPIOB);
    k2 = (~receive & (1 << ROW0));
    k6 = (~receive & (1 << ROW1));
    k10 = (~receive & (1 << ROW2));
    k14 = (~receive & (1 << ROW3));

    mcp_send_command(IObut1, MCP_GPIOB, ~COL2);
    mcp_read_command(IObut1, MCP_GPIOB);
    k3 = (~receive & (1 << ROW0));
    k7 = (~receive & (1 << ROW1));
    k11 = (~receive & (1 << ROW2));
    k15 = (~receive & (1 << ROW3));

    mcp_send_command(IObut1, MCP_GPIOB, ~COL3);
    mcp_read_command(IObut1, MCP_GPIOB);
    k4 = (~receive & (1 << ROW0));
    k8 = (~receive & (1 << ROW1));
    k12 = (~receive & (1 << ROW2));
    k16 = (~receive & (1 << ROW3));

    // Log which keys were pressed to terminal each loop
    //if(k1){LogTextMessage("K1");}
    //if(k2){LogTextMessage("K2");}
    //if(k3){LogTextMessage("K3");}
    //if(k4){LogTextMessage("K4");}
    //if(k5){LogTextMessage("K5");}
    //if(k6){LogTextMessage("K6");}
    //if(k7){LogTextMessage("K7");}
    //if(k8){LogTextMessage("K8");}
    //if(k9){LogTextMessage("K9");}
    //if(k10){LogTextMessage("K10");}
    //if(k11){LogTextMessage("K11");}
    //if(k12){LogTextMessage("K12");}
    //if(k13){LogTextMessage("K13");}
    //if(k14){LogTextMessage("K14");}
    //if(k15){LogTextMessage("K15");}
    //if(k16){LogTextMessage("K16");}
}]]></code.declaration>
      <code.init><![CDATA[// *********
// Init Code
// *********

//Don't have access IO setup yet when local-data runs, so have to call setup here
setup();]]></code.init>
      <code.krate><![CDATA[// ***********
// K-rate Code
// ***********
        

outlet_key1 = k1;
outlet_key2 = k2; //Change outlets here
outlet_key3 = k3; //Change outlets here
outlet_key4 = k4; //Change outlets here
outlet_key5 = k5; //Change outlets here
outlet_key6 = k6; //Change outlets here
outlet_key7 = k7; //Change outlets here
outlet_key8 = k8; //Change outlets here
outlet_key9 = k9; //Change outlets here
outlet_key10 = k10; //Change outlets here
outlet_key11 = k11; //Change outlets here
outlet_key12 = k12; //Change outlets here
outlet_key13 = k13; //Change outlets here	
//Loop used for setting test poll rate. K-rate is 3000Hz and we aren't doing anything else here
count++; 
  	if(count == 5) 	//Poll every 5ms
  	{
		count = 0; 	//Reset the count
		bProcess(); 	//Process for reading encoders
		
	}]]></code.krate>
   </obj.normal>
</objdefs>